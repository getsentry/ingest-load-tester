# Increase/decrease `weight` to enable/disable tasks. In the example setup
# `SimpleLoadTest` is disabled because of weight=0, and envelope sending is
# disabled as well. Effectively we only send random events as pure JSON.

users:
  # A task that sends a couple events from files.
  SimpleLoadTest:
    wait_time: constant(1)
    num_projects: 10
    weight: 0
    tasks:
      file_event_task_factory:
        weight: 0
        filename: test-events/small.json

      file_envelope_event_task_factory:
        weight: 0
        filename: path/to/custom/file.json

      # Sessions will be generated in real time
      session_event_task_factory:
        weight: 0
        # use w d h m s for weeks days hours minutes seconds e.g. 3w2d4h3s = 3 weeks 2 days 4 hours 3 seconds
        # the higher the range the more buckets will be created (Relay accepts ranges of up to 5 days from now)
        # (started_range + duration_range should be under 5 days)
        started_range: 2m
        # controls the range of the duration field (see started_range for valid values).
        duration_range: 1m
        num_releases: 1 # number of releases that will appear in the session messages
        num_environments: 1 # number of environments that will appear in session
        num_users: 1000 # number of different users generated
        # relative weights of various outcomes (set it to 0 to disable a certain outcome)
        ok_weight: 2
        exited_weight: 10
        errored_weight: 1
        crashed_weight: 1
        abnormal_weight: 1

  TransactionEvents:
    wait_time: constant(0.5)
    num_projects: 10
    weight: 1
    tasks:
      transaction_event_task_factory:
        weight: 1
        num_releases: 10
        max_users: 10
        min_spans: 2
        max_spans: 20
        transaction_duration_max: 10m
        transaction_duration_min: 10ms
        transaction_timestamp_spread: 4h
        min_breadcrumbs: 0
        max_breadcrumbs: 50
        breadcrumb_categories: ~
        breadcrumb_levels: ~
        breadcrumb_types: ~
        breadcrumb_messages: ~
        measurements:
          - fp
          - fcp
          - lcp
          - fid
          - cls
          - ttfb
          - ttfb.requesttime
          - app_start_cold
          - app_start_warm
          - frames_total
          - frames_slow
          - frames_frozen
          - frames_slow_rate
          - frames_frozen_rate
          - stall_count
          - stall_total_time
          - stall_longest_time
          - stall_percentage
        operations:
          - browser
          - http
          - db
          - resource.script
          - resource.link
          - resource.css
          - resource.img
          - resource.other
  #          - react.mount
  #          - react.update
  #          - react.update
  #          - products received
  #          - mark
  #          - paint
  #          - http.server
  #          - connect to db
  #          - run query
  #          - format results


  # A task that generates random events based on config parameters
  RandomEvents:
    wait_time: constant(1)
    num_projects: 10
    weight: 0
    tasks:
#      NOT IMPLEMENTED YET
#      random_envelope_transaction_task_factory:
#        weight: 0
#        min_spans: 1
#        max_spans: 15
#        release: [ "sampling@1.0", "sampling@2.0" ]
#        trace_user_id: "user"
#        trace_user_segment: [ "vip","paid","free" ]
#        trace_environment: [ "debug","prod" ]
#        trace_relase: [ "1.0.0","1.1.1" ]

      random_envelope_event_task_factory:
        weight: 1
        # trace parameters are envelope specific
        trace_user_id: "user"
        trace_user_segment: [ "vip","paid","free" ]
        trace_environment: [ "debug","prod" ]
        release: [ "sampling@1.0", "sampling@2.0" ]
        # This task generally accepts the same arguments as `random_event_task_factory`.
        with_level: true
        num_event_groups: 1
        num_releases: 10
        with_javascript_stacktrace: false
        # In case of javascript, need to specify a fixed release in order to
        # match the source files
        #
        # The release should match the release specified when uploading the
        # source files with sentry-cli
        #
        # release: "1"

        # Amount of stacktraces and frames to generate, only in effect if js or native
        # stacktraces are generated at all
        num_stacktraces: 5
        min_frames: 5
        max_frames: 30

      random_event_task_factory:
        weight: 1
        with_level: true

        # How many issues to create.
        num_event_groups: 10

        # Amount of users to generate, if null (~), users will just be
        # entirely random IPv4 addresses.
        max_users: ~

        # Breadcrumb options
        min_breadcrumbs: 0
        max_breadcrumbs: 50
        breadcrumb_categories: ~
        breadcrumb_levels: ~
        breadcrumb_types: ~
        breadcrumb_messages: ~

        # Add a native stacktrace such that symbolicator is part of the
        # equation. The debug files necessary for processing the stacktrace
        # can be found in the native-images/ folder and can be uploaded with:
        #
        #   sentry-cli upload-dif . --org sentry --project internal
        with_native_stacktrace: false

        # Add a javascript stacktrace that can be symbolicated
        # need to create release and upload the js-images/ folder
        #   sentry-cli releases new <RELEASE_NAME>
        #   sentry-cli releases files <RELEASE_NAME> upload-sourcemaps ./js-images
        #   sentry-cli releases finalize <RELEASE_NAME>
        #
        # note if native stacktrace is enabled the javascript stacktrace will
        # be ignored
        with_javascript_stacktrace: false
        # In case of javascript, need to specify a fixed release in order to
        # match the source files
        #
        # The release should match the release specified when uploading the
        # source files with sentry-cli
        #
        # release: "1"

        # Amount of stacktraces and frames to generate, only in effect if js or native
        # stacktraces are generated at all
        num_stacktraces: 5
        min_frames: 5
        max_frames: 30

        # Amount of random releases to generate.
        num_releases: 10
        # Single specific hardcoded release.
        release: ~
